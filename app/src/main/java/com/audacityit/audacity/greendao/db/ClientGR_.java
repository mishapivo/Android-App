package com.audacityit.audacity.greendao.db;

import java.util.List;
import com.audacityit.audacity.greendao.db.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "CLIENT_GR_".
 */
public class ClientGR_ {

    private Long id;
    private String name;
    private String logo;
    private String company;
    private String country;
    private long client_id;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ClientGR_Dao myDao;

    private ClientGR clientGR;
    private Long clientGR__resolvedKey;

    private List<ClientTag> clientTagList;

    public ClientGR_() {
    }

    public ClientGR_(Long id) {
        this.id = id;
    }

    public ClientGR_(Long id, String name, String logo, String company, String country, long client_id) {
        this.id = id;
        this.name = name;
        this.logo = logo;
        this.company = company;
        this.country = country;
        this.client_id = client_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getClientGR_Dao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getLogo() {
        return logo;
    }

    public void setLogo(String logo) {
        this.logo = logo;
    }

    public String getCompany() {
        return company;
    }

    public void setCompany(String company) {
        this.company = company;
    }

    public String getCountry() {
        return country;
    }

    public void setCountry(String country) {
        this.country = country;
    }

    public long getClient_id() {
        return client_id;
    }

    public void setClient_id(long client_id) {
        this.client_id = client_id;
    }

    /** To-one relationship, resolved on first access. */
    public ClientGR getClientGR() {
        long __key = this.client_id;
        if (clientGR__resolvedKey == null || !clientGR__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ClientGRDao targetDao = daoSession.getClientGRDao();
            ClientGR clientGRNew = targetDao.load(__key);
            synchronized (this) {
                clientGR = clientGRNew;
            	clientGR__resolvedKey = __key;
            }
        }
        return clientGR;
    }

    public void setClientGR(ClientGR clientGR) {
        if (clientGR == null) {
            throw new DaoException("To-one property 'client_id' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.clientGR = clientGR;
            client_id = clientGR.getId();
            clientGR__resolvedKey = client_id;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<ClientTag> getClientTagList() {
        if (clientTagList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ClientTagDao targetDao = daoSession.getClientTagDao();
            List<ClientTag> clientTagListNew = targetDao._queryClientGR__ClientTagList(id);
            synchronized (this) {
                if(clientTagList == null) {
                    clientTagList = clientTagListNew;
                }
            }
        }
        return clientTagList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetClientTagList() {
        clientTagList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
