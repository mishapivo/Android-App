package com.audacityit.audacity.greendao.db;

import java.util.List;
import com.audacityit.audacity.greendao.db.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "PORTFOLIO_GR_".
 */
public class PortfolioGR_ {

    private Long id;
    private String title;
    private String image;
    private long portfolio_id;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient PortfolioGR_Dao myDao;

    private PortfolioGR portfolioGR;
    private Long portfolioGR__resolvedKey;

    private List<PTagGR> pTagGRList;

    public PortfolioGR_() {
    }

    public PortfolioGR_(Long id) {
        this.id = id;
    }

    public PortfolioGR_(Long id, String title, String image, long portfolio_id) {
        this.id = id;
        this.title = title;
        this.image = image;
        this.portfolio_id = portfolio_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPortfolioGR_Dao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getImage() {
        return image;
    }

    public void setImage(String image) {
        this.image = image;
    }

    public long getPortfolio_id() {
        return portfolio_id;
    }

    public void setPortfolio_id(long portfolio_id) {
        this.portfolio_id = portfolio_id;
    }

    /** To-one relationship, resolved on first access. */
    public PortfolioGR getPortfolioGR() {
        long __key = this.portfolio_id;
        if (portfolioGR__resolvedKey == null || !portfolioGR__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PortfolioGRDao targetDao = daoSession.getPortfolioGRDao();
            PortfolioGR portfolioGRNew = targetDao.load(__key);
            synchronized (this) {
                portfolioGR = portfolioGRNew;
            	portfolioGR__resolvedKey = __key;
            }
        }
        return portfolioGR;
    }

    public void setPortfolioGR(PortfolioGR portfolioGR) {
        if (portfolioGR == null) {
            throw new DaoException("To-one property 'portfolio_id' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.portfolioGR = portfolioGR;
            portfolio_id = portfolioGR.getId();
            portfolioGR__resolvedKey = portfolio_id;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<PTagGR> getPTagGRList() {
        if (pTagGRList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PTagGRDao targetDao = daoSession.getPTagGRDao();
            List<PTagGR> pTagGRListNew = targetDao._queryPortfolioGR__PTagGRList(id);
            synchronized (this) {
                if(pTagGRList == null) {
                    pTagGRList = pTagGRListNew;
                }
            }
        }
        return pTagGRList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetPTagGRList() {
        pTagGRList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
