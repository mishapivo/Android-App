package com.audacityit.audacity.greendao.db;

import com.audacityit.audacity.greendao.db.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "METHODOLOGY_ITEM_GR".
 */
public class MethodologyItemGR {

    private Long id;
    private String title;
    private String details;
    private String icon;
    private long item_id;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient MethodologyItemGRDao myDao;

    private MethodologyGR_ methodologyGR_;
    private Long methodologyGR___resolvedKey;


    public MethodologyItemGR() {
    }

    public MethodologyItemGR(Long id) {
        this.id = id;
    }

    public MethodologyItemGR(Long id, String title, String details, String icon, long item_id) {
        this.id = id;
        this.title = title;
        this.details = details;
        this.icon = icon;
        this.item_id = item_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getMethodologyItemGRDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getDetails() {
        return details;
    }

    public void setDetails(String details) {
        this.details = details;
    }

    public String getIcon() {
        return icon;
    }

    public void setIcon(String icon) {
        this.icon = icon;
    }

    public long getItem_id() {
        return item_id;
    }

    public void setItem_id(long item_id) {
        this.item_id = item_id;
    }

    /** To-one relationship, resolved on first access. */
    public MethodologyGR_ getMethodologyGR_() {
        long __key = this.item_id;
        if (methodologyGR___resolvedKey == null || !methodologyGR___resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MethodologyGR_Dao targetDao = daoSession.getMethodologyGR_Dao();
            MethodologyGR_ methodologyGR_New = targetDao.load(__key);
            synchronized (this) {
                methodologyGR_ = methodologyGR_New;
            	methodologyGR___resolvedKey = __key;
            }
        }
        return methodologyGR_;
    }

    public void setMethodologyGR_(MethodologyGR_ methodologyGR_) {
        if (methodologyGR_ == null) {
            throw new DaoException("To-one property 'item_id' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.methodologyGR_ = methodologyGR_;
            item_id = methodologyGR_.getId();
            methodologyGR___resolvedKey = item_id;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
