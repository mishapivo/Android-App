package com.audacityit.audacity.greendao.db;

import java.util.List;
import com.audacityit.audacity.greendao.db.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "GETSTARTED_GR".
 */
public class GetstartedGR {

    private Long id;
    private String range1;
    private String range2;
    private String range3;
    private String range4;
    private String phone;
    private String email;
    private String web;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient GetstartedGRDao myDao;

    private List<GetstartedTag> getstartedTagList;

    public GetstartedGR() {
    }

    public GetstartedGR(Long id) {
        this.id = id;
    }

    public GetstartedGR(Long id, String range1, String range2, String range3, String range4, String phone, String email, String web) {
        this.id = id;
        this.range1 = range1;
        this.range2 = range2;
        this.range3 = range3;
        this.range4 = range4;
        this.phone = phone;
        this.email = email;
        this.web = web;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getGetstartedGRDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getRange1() {
        return range1;
    }

    public void setRange1(String range1) {
        this.range1 = range1;
    }

    public String getRange2() {
        return range2;
    }

    public void setRange2(String range2) {
        this.range2 = range2;
    }

    public String getRange3() {
        return range3;
    }

    public void setRange3(String range3) {
        this.range3 = range3;
    }

    public String getRange4() {
        return range4;
    }

    public void setRange4(String range4) {
        this.range4 = range4;
    }

    public String getPhone() {
        return phone;
    }

    public void setPhone(String phone) {
        this.phone = phone;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getWeb() {
        return web;
    }

    public void setWeb(String web) {
        this.web = web;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<GetstartedTag> getGetstartedTagList() {
        if (getstartedTagList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            GetstartedTagDao targetDao = daoSession.getGetstartedTagDao();
            List<GetstartedTag> getstartedTagListNew = targetDao._queryGetstartedGR_GetstartedTagList(id);
            synchronized (this) {
                if(getstartedTagList == null) {
                    getstartedTagList = getstartedTagListNew;
                }
            }
        }
        return getstartedTagList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetGetstartedTagList() {
        getstartedTagList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
