package com.audacityit.audacity.greendao.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.audacityit.audacity.greendao.db.OverviewcontentGR;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "OVERVIEWCONTENT_GR".
*/
public class OverviewcontentGRDao extends AbstractDao<OverviewcontentGR, Long> {

    public static final String TABLENAME = "OVERVIEWCONTENT_GR";

    /**
     * Properties of entity OverviewcontentGR.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Background = new Property(2, String.class, "background", false, "BACKGROUND");
        public final static Property Logo = new Property(3, String.class, "logo", false, "LOGO");
        public final static Property Moto = new Property(4, String.class, "moto", false, "MOTO");
        public final static Property Count1text = new Property(5, String.class, "count1text", false, "COUNT1TEXT");
        public final static Property Count1no = new Property(6, String.class, "count1no", false, "COUNT1NO");
        public final static Property Count2text = new Property(7, String.class, "count2text", false, "COUNT2TEXT");
        public final static Property Count2no = new Property(8, String.class, "count2no", false, "COUNT2NO");
        public final static Property Count3text = new Property(9, String.class, "count3text", false, "COUNT3TEXT");
        public final static Property Count3no = new Property(10, String.class, "count3no", false, "COUNT3NO");
    };


    public OverviewcontentGRDao(DaoConfig config) {
        super(config);
    }
    
    public OverviewcontentGRDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"OVERVIEWCONTENT_GR\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TITLE\" TEXT," + // 1: title
                "\"BACKGROUND\" TEXT," + // 2: background
                "\"LOGO\" TEXT," + // 3: logo
                "\"MOTO\" TEXT," + // 4: moto
                "\"COUNT1TEXT\" TEXT," + // 5: count1text
                "\"COUNT1NO\" TEXT," + // 6: count1no
                "\"COUNT2TEXT\" TEXT," + // 7: count2text
                "\"COUNT2NO\" TEXT," + // 8: count2no
                "\"COUNT3TEXT\" TEXT," + // 9: count3text
                "\"COUNT3NO\" TEXT);"); // 10: count3no
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"OVERVIEWCONTENT_GR\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, OverviewcontentGR entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String background = entity.getBackground();
        if (background != null) {
            stmt.bindString(3, background);
        }
 
        String logo = entity.getLogo();
        if (logo != null) {
            stmt.bindString(4, logo);
        }
 
        String moto = entity.getMoto();
        if (moto != null) {
            stmt.bindString(5, moto);
        }
 
        String count1text = entity.getCount1text();
        if (count1text != null) {
            stmt.bindString(6, count1text);
        }
 
        String count1no = entity.getCount1no();
        if (count1no != null) {
            stmt.bindString(7, count1no);
        }
 
        String count2text = entity.getCount2text();
        if (count2text != null) {
            stmt.bindString(8, count2text);
        }
 
        String count2no = entity.getCount2no();
        if (count2no != null) {
            stmt.bindString(9, count2no);
        }
 
        String count3text = entity.getCount3text();
        if (count3text != null) {
            stmt.bindString(10, count3text);
        }
 
        String count3no = entity.getCount3no();
        if (count3no != null) {
            stmt.bindString(11, count3no);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public OverviewcontentGR readEntity(Cursor cursor, int offset) {
        OverviewcontentGR entity = new OverviewcontentGR( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // background
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // logo
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // moto
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // count1text
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // count1no
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // count2text
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // count2no
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // count3text
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // count3no
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, OverviewcontentGR entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBackground(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLogo(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMoto(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCount1text(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCount1no(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCount2text(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCount2no(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCount3text(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCount3no(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(OverviewcontentGR entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(OverviewcontentGR entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
