package com.audacityit.audacity.greendao.db;

import com.audacityit.audacity.greendao.db.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "CLIENT_TAG".
 */
public class ClientTag {

    private Long id;
    private String tag;
    private String url;
    private long tag_id;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ClientTagDao myDao;

    private ClientGR_ clientGR_;
    private Long clientGR___resolvedKey;


    public ClientTag() {
    }

    public ClientTag(Long id) {
        this.id = id;
    }

    public ClientTag(Long id, String tag, String url, long tag_id) {
        this.id = id;
        this.tag = tag;
        this.url = url;
        this.tag_id = tag_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getClientTagDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getTag() {
        return tag;
    }

    public void setTag(String tag) {
        this.tag = tag;
    }

    public String getUrl() {
        return url;
    }

    public void setUrl(String url) {
        this.url = url;
    }

    public long getTag_id() {
        return tag_id;
    }

    public void setTag_id(long tag_id) {
        this.tag_id = tag_id;
    }

    /** To-one relationship, resolved on first access. */
    public ClientGR_ getClientGR_() {
        long __key = this.tag_id;
        if (clientGR___resolvedKey == null || !clientGR___resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ClientGR_Dao targetDao = daoSession.getClientGR_Dao();
            ClientGR_ clientGR_New = targetDao.load(__key);
            synchronized (this) {
                clientGR_ = clientGR_New;
            	clientGR___resolvedKey = __key;
            }
        }
        return clientGR_;
    }

    public void setClientGR_(ClientGR_ clientGR_) {
        if (clientGR_ == null) {
            throw new DaoException("To-one property 'tag_id' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.clientGR_ = clientGR_;
            tag_id = clientGR_.getId();
            clientGR___resolvedKey = tag_id;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
