package com.audacityit.audacity.greendao.db;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.audacityit.audacity.greendao.db.ClientGR_;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CLIENT_GR_".
*/
public class ClientGR_Dao extends AbstractDao<ClientGR_, Long> {

    public static final String TABLENAME = "CLIENT_GR_";

    /**
     * Properties of entity ClientGR_.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Logo = new Property(2, String.class, "logo", false, "LOGO");
        public final static Property Company = new Property(3, String.class, "company", false, "COMPANY");
        public final static Property Country = new Property(4, String.class, "country", false, "COUNTRY");
        public final static Property Client_id = new Property(5, long.class, "client_id", false, "CLIENT_ID");
    };

    private DaoSession daoSession;

    private Query<ClientGR_> clientGR_ClientGR_ListQuery;

    public ClientGR_Dao(DaoConfig config) {
        super(config);
    }
    
    public ClientGR_Dao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CLIENT_GR_\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"LOGO\" TEXT," + // 2: logo
                "\"COMPANY\" TEXT," + // 3: company
                "\"COUNTRY\" TEXT," + // 4: country
                "\"CLIENT_ID\" INTEGER NOT NULL );"); // 5: client_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CLIENT_GR_\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ClientGR_ entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String logo = entity.getLogo();
        if (logo != null) {
            stmt.bindString(3, logo);
        }
 
        String company = entity.getCompany();
        if (company != null) {
            stmt.bindString(4, company);
        }
 
        String country = entity.getCountry();
        if (country != null) {
            stmt.bindString(5, country);
        }
        stmt.bindLong(6, entity.getClient_id());
    }

    @Override
    protected void attachEntity(ClientGR_ entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ClientGR_ readEntity(Cursor cursor, int offset) {
        ClientGR_ entity = new ClientGR_( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // logo
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // company
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // country
            cursor.getLong(offset + 5) // client_id
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ClientGR_ entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLogo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCompany(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCountry(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setClient_id(cursor.getLong(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ClientGR_ entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ClientGR_ entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "clientGR_List" to-many relationship of ClientGR. */
    public List<ClientGR_> _queryClientGR_ClientGR_List(long client_id) {
        synchronized (this) {
            if (clientGR_ClientGR_ListQuery == null) {
                QueryBuilder<ClientGR_> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Client_id.eq(null));
                clientGR_ClientGR_ListQuery = queryBuilder.build();
            }
        }
        Query<ClientGR_> query = clientGR_ClientGR_ListQuery.forCurrentThread();
        query.setParameter(0, client_id);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getClientGRDao().getAllColumns());
            builder.append(" FROM CLIENT_GR_ T");
            builder.append(" LEFT JOIN CLIENT_GR T0 ON T.\"CLIENT_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected ClientGR_ loadCurrentDeep(Cursor cursor, boolean lock) {
        ClientGR_ entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        ClientGR clientGR = loadCurrentOther(daoSession.getClientGRDao(), cursor, offset);
         if(clientGR != null) {
            entity.setClientGR(clientGR);
        }

        return entity;    
    }

    public ClientGR_ loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<ClientGR_> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<ClientGR_> list = new ArrayList<ClientGR_>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<ClientGR_> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<ClientGR_> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
