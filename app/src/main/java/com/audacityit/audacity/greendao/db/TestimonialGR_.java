package com.audacityit.audacity.greendao.db;

import com.audacityit.audacity.greendao.db.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "TESTIMONIAL_GR_".
 */
public class TestimonialGR_ {

    private Long id;
    private String name;
    private String image;
    private String project;
    private String url;
    private String feedback;
    private long testimonial_id;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient TestimonialGR_Dao myDao;

    private TestimonialGR testimonialGR;
    private Long testimonialGR__resolvedKey;


    public TestimonialGR_() {
    }

    public TestimonialGR_(Long id) {
        this.id = id;
    }

    public TestimonialGR_(Long id, String name, String image, String project, String url, String feedback, long testimonial_id) {
        this.id = id;
        this.name = name;
        this.image = image;
        this.project = project;
        this.url = url;
        this.feedback = feedback;
        this.testimonial_id = testimonial_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getTestimonialGR_Dao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getImage() {
        return image;
    }

    public void setImage(String image) {
        this.image = image;
    }

    public String getProject() {
        return project;
    }

    public void setProject(String project) {
        this.project = project;
    }

    public String getUrl() {
        return url;
    }

    public void setUrl(String url) {
        this.url = url;
    }

    public String getFeedback() {
        return feedback;
    }

    public void setFeedback(String feedback) {
        this.feedback = feedback;
    }

    public long getTestimonial_id() {
        return testimonial_id;
    }

    public void setTestimonial_id(long testimonial_id) {
        this.testimonial_id = testimonial_id;
    }

    /** To-one relationship, resolved on first access. */
    public TestimonialGR getTestimonialGR() {
        long __key = this.testimonial_id;
        if (testimonialGR__resolvedKey == null || !testimonialGR__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TestimonialGRDao targetDao = daoSession.getTestimonialGRDao();
            TestimonialGR testimonialGRNew = targetDao.load(__key);
            synchronized (this) {
                testimonialGR = testimonialGRNew;
            	testimonialGR__resolvedKey = __key;
            }
        }
        return testimonialGR;
    }

    public void setTestimonialGR(TestimonialGR testimonialGR) {
        if (testimonialGR == null) {
            throw new DaoException("To-one property 'testimonial_id' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.testimonialGR = testimonialGR;
            testimonial_id = testimonialGR.getId();
            testimonialGR__resolvedKey = testimonial_id;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
