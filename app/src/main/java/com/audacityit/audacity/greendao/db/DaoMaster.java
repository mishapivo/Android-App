package com.audacityit.audacity.greendao.db;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;
import de.greenrobot.dao.AbstractDaoMaster;
import de.greenrobot.dao.identityscope.IdentityScopeType;

import com.audacityit.audacity.greendao.db.SlideBarGRDao;
import com.audacityit.audacity.greendao.db.SplashGRDao;
import com.audacityit.audacity.greendao.db.OverviewcontentGRDao;
import com.audacityit.audacity.greendao.db.OverviewGRDao;
import com.audacityit.audacity.greendao.db.OverviewitemsGRDao;
import com.audacityit.audacity.greendao.db.HomeGRDao;
import com.audacityit.audacity.greendao.db.HomeGR_Dao;
import com.audacityit.audacity.greendao.db.PortfolioGRDao;
import com.audacityit.audacity.greendao.db.PortfolioGR_Dao;
import com.audacityit.audacity.greendao.db.PTagGRDao;
import com.audacityit.audacity.greendao.db.ClientGRDao;
import com.audacityit.audacity.greendao.db.ClientGR_Dao;
import com.audacityit.audacity.greendao.db.ClientTagDao;
import com.audacityit.audacity.greendao.db.GetstartedGRDao;
import com.audacityit.audacity.greendao.db.GetstartedTagDao;
import com.audacityit.audacity.greendao.db.TeamGRDao;
import com.audacityit.audacity.greendao.db.TeamGR_Dao;
import com.audacityit.audacity.greendao.db.MethodologyGRDao;
import com.audacityit.audacity.greendao.db.MethodologyGR_Dao;
import com.audacityit.audacity.greendao.db.MethodologyItemGRDao;
import com.audacityit.audacity.greendao.db.FqaGRDao;
import com.audacityit.audacity.greendao.db.FqaGR_Dao;
import com.audacityit.audacity.greendao.db.TestimonialGRDao;
import com.audacityit.audacity.greendao.db.TestimonialGR_Dao;
import com.audacityit.audacity.greendao.db.SocialGRDao;
import com.audacityit.audacity.greendao.db.SocialGR_Dao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * Master of DAO (schema version 1): knows all DAOs.
*/
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = 1;

    /** Creates underlying database table using DAOs. */
    public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
        SlideBarGRDao.createTable(db, ifNotExists);
        SplashGRDao.createTable(db, ifNotExists);
        OverviewcontentGRDao.createTable(db, ifNotExists);
        OverviewGRDao.createTable(db, ifNotExists);
        OverviewitemsGRDao.createTable(db, ifNotExists);
        HomeGRDao.createTable(db, ifNotExists);
        HomeGR_Dao.createTable(db, ifNotExists);
        PortfolioGRDao.createTable(db, ifNotExists);
        PortfolioGR_Dao.createTable(db, ifNotExists);
        PTagGRDao.createTable(db, ifNotExists);
        ClientGRDao.createTable(db, ifNotExists);
        ClientGR_Dao.createTable(db, ifNotExists);
        ClientTagDao.createTable(db, ifNotExists);
        GetstartedGRDao.createTable(db, ifNotExists);
        GetstartedTagDao.createTable(db, ifNotExists);
        TeamGRDao.createTable(db, ifNotExists);
        TeamGR_Dao.createTable(db, ifNotExists);
        MethodologyGRDao.createTable(db, ifNotExists);
        MethodologyGR_Dao.createTable(db, ifNotExists);
        MethodologyItemGRDao.createTable(db, ifNotExists);
        FqaGRDao.createTable(db, ifNotExists);
        FqaGR_Dao.createTable(db, ifNotExists);
        TestimonialGRDao.createTable(db, ifNotExists);
        TestimonialGR_Dao.createTable(db, ifNotExists);
        SocialGRDao.createTable(db, ifNotExists);
        SocialGR_Dao.createTable(db, ifNotExists);
    }
    
    /** Drops underlying database table using DAOs. */
    public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
        SlideBarGRDao.dropTable(db, ifExists);
        SplashGRDao.dropTable(db, ifExists);
        OverviewcontentGRDao.dropTable(db, ifExists);
        OverviewGRDao.dropTable(db, ifExists);
        OverviewitemsGRDao.dropTable(db, ifExists);
        HomeGRDao.dropTable(db, ifExists);
        HomeGR_Dao.dropTable(db, ifExists);
        PortfolioGRDao.dropTable(db, ifExists);
        PortfolioGR_Dao.dropTable(db, ifExists);
        PTagGRDao.dropTable(db, ifExists);
        ClientGRDao.dropTable(db, ifExists);
        ClientGR_Dao.dropTable(db, ifExists);
        ClientTagDao.dropTable(db, ifExists);
        GetstartedGRDao.dropTable(db, ifExists);
        GetstartedTagDao.dropTable(db, ifExists);
        TeamGRDao.dropTable(db, ifExists);
        TeamGR_Dao.dropTable(db, ifExists);
        MethodologyGRDao.dropTable(db, ifExists);
        MethodologyGR_Dao.dropTable(db, ifExists);
        MethodologyItemGRDao.dropTable(db, ifExists);
        FqaGRDao.dropTable(db, ifExists);
        FqaGR_Dao.dropTable(db, ifExists);
        TestimonialGRDao.dropTable(db, ifExists);
        TestimonialGR_Dao.dropTable(db, ifExists);
        SocialGRDao.dropTable(db, ifExists);
        SocialGR_Dao.dropTable(db, ifExists);
    }
    
    public static abstract class OpenHelper extends SQLiteOpenHelper {

        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(SQLiteDatabase db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
        }
    }
    
    /** WARNING: Drops all table on Upgrade! Use only during development. */
    public static class DevOpenHelper extends OpenHelper {
        public DevOpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory);
        }

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            dropAllTables(db, true);
            onCreate(db);
        }
    }

    public DaoMaster(SQLiteDatabase db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(SlideBarGRDao.class);
        registerDaoClass(SplashGRDao.class);
        registerDaoClass(OverviewcontentGRDao.class);
        registerDaoClass(OverviewGRDao.class);
        registerDaoClass(OverviewitemsGRDao.class);
        registerDaoClass(HomeGRDao.class);
        registerDaoClass(HomeGR_Dao.class);
        registerDaoClass(PortfolioGRDao.class);
        registerDaoClass(PortfolioGR_Dao.class);
        registerDaoClass(PTagGRDao.class);
        registerDaoClass(ClientGRDao.class);
        registerDaoClass(ClientGR_Dao.class);
        registerDaoClass(ClientTagDao.class);
        registerDaoClass(GetstartedGRDao.class);
        registerDaoClass(GetstartedTagDao.class);
        registerDaoClass(TeamGRDao.class);
        registerDaoClass(TeamGR_Dao.class);
        registerDaoClass(MethodologyGRDao.class);
        registerDaoClass(MethodologyGR_Dao.class);
        registerDaoClass(MethodologyItemGRDao.class);
        registerDaoClass(FqaGRDao.class);
        registerDaoClass(FqaGR_Dao.class);
        registerDaoClass(TestimonialGRDao.class);
        registerDaoClass(TestimonialGR_Dao.class);
        registerDaoClass(SocialGRDao.class);
        registerDaoClass(SocialGR_Dao.class);
    }
    
    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }
    
    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }
    
}
