package com.audacityit.audacity.greendao.db;

import com.audacityit.audacity.greendao.db.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "SOCIAL_GR_".
 */
public class SocialGR_ {

    private Long id;
    private String name;
    private String image;
    private String url;
    private long social_id;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient SocialGR_Dao myDao;

    private SocialGR socialGR;
    private Long socialGR__resolvedKey;


    public SocialGR_() {
    }

    public SocialGR_(Long id) {
        this.id = id;
    }

    public SocialGR_(Long id, String name, String image, String url, long social_id) {
        this.id = id;
        this.name = name;
        this.image = image;
        this.url = url;
        this.social_id = social_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getSocialGR_Dao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getImage() {
        return image;
    }

    public void setImage(String image) {
        this.image = image;
    }

    public String getUrl() {
        return url;
    }

    public void setUrl(String url) {
        this.url = url;
    }

    public long getSocial_id() {
        return social_id;
    }

    public void setSocial_id(long social_id) {
        this.social_id = social_id;
    }

    /** To-one relationship, resolved on first access. */
    public SocialGR getSocialGR() {
        long __key = this.social_id;
        if (socialGR__resolvedKey == null || !socialGR__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SocialGRDao targetDao = daoSession.getSocialGRDao();
            SocialGR socialGRNew = targetDao.load(__key);
            synchronized (this) {
                socialGR = socialGRNew;
            	socialGR__resolvedKey = __key;
            }
        }
        return socialGR;
    }

    public void setSocialGR(SocialGR socialGR) {
        if (socialGR == null) {
            throw new DaoException("To-one property 'social_id' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.socialGR = socialGR;
            social_id = socialGR.getId();
            socialGR__resolvedKey = social_id;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
